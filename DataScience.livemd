# Data Science

```elixir
Mix.install([
  {:explorer, "~> 0.3.1"},
  {:kino, "~> 0.4.1"}
])
```

## Setup

```elixir
alias Explorer.DataFrame
alias Explorer.Series
alias Explorer.Datasets
```

## Explorer - Dataframe library

### Reading and Writing Data

<!-- livebook:{"break_markdown":true} -->

Data can be read from CSV, NDJSON, Parquet and Arrow IPC formats

```elixir
df = Datasets.fossil_fuels()
```

```elixir
DataFrame.table(df)
```

```elixir
input = Kino.Input.text("Filename")
```

```elixir
filename = Kino.Input.read(input)
full_path = "/Users/charlie/github.com/charlieroth/elixirlab/#{filename}"
DataFrame.to_csv(df, full_path)
```

### Working with Series

`Explorer` works with a concept of `Series` which can be thought of in the same way as `vectors` in R or `series` in Pandas

`Explorer` has the following `dtypes`:

* `:float`
* `:integer`
* `:boolean`
* `:string`
* `:date` - unwraps `Elixir.Date`
* `:datetime` - unwraps `Elixir.NativeDateTime`

```elixir
s1 = Series.from_list([1, 2, 3, 4])
```

```elixir
s2 = Series.from_list(["a", "b", "c", "d"])
```

```elixir
s3 = Series.from_list([~D[2022-11-22], ~D[1970-01-01]])
```

```elixir
1..100 |> Enum.to_list() |> Series.from_list()
```

```elixir
s4 = Series.from_list([1.0, 2.0, nil, nil, 5.0])
```

```elixir
Series.fill_missing(s4, :forward)
```

```elixir
Series.from_list([1, 2.0])
```

```elixir
Series.from_list([1, 2, 3, "a"])
```

```elixir
s = 1..10 |> Enum.to_list() |> Series.from_list()
```

`Series` implement the `Access` protocol so you can slice and dice in many ways

```elixir
s[1]
```

```elixir
s[-1]
```

```elixir
s[0..4]
```

```elixir
s[[0, 4, 4]]
```

Convert back to an Elixir `List`

```elixir
Series.to_list(s)
```

```elixir
s = 1..11 |> Enum.to_list() |> Series.from_list()
s1 = 11..1 |> Enum.to_list() |> Series.from_list()
```

```elixir
Series.equal(s, s1)
```

```elixir
Series.equal(s, 5)
```

```elixir
Series.not_equal(s, 10)
```

```elixir
Series.add(s, s1)
```

```elixir
Series.subtract(s, 4)
```

```elixir
1..100 |> Enum.to_list() |> Enum.shuffle() |> Series.from_list() |> Series.sort()
```

### Working with DataFrames

<!-- livebook:{"break_markdown":true} -->

[DataFrames: Explorer Docs](https://hexdocs.pm/explorer/exploring_explorer.html#working-with-dataframes)

A `DataFrame` is a collection of `Series` of the same size

```elixir
df = DataFrame.new(a: [1, 2, 3], b: ["a", "b", "c"])
```

```elixir
DataFrame.names(df)
```

```elixir
DataFrame.dtypes(df)
```

```elixir
DataFrame.shape(df)
```

```elixir
DataFrame.select(df, ["a"])
```

You can also execute a filtering callback on the column names

```elixir
DataFrame.select(df, &String.equivalent?(&1, "b"))
```
